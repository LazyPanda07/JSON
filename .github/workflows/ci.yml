name: CI


on:
  push:
   branches: [master, dev]


jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
    
    steps:
    - uses: actions/checkout@v4
  
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DBUILD_SHARED_LIBS=${{ matrix.shared[0] }} -G "NMake Makefiles" ..
          nmake install
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Windows
        path: build/install-dir/


  linux-build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
        compiler: [g++, clang++]

    steps:
    - uses: actions/checkout@v4

    - name: Build
      env:
        CXX: ${{ matrix.compiler }}
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DBUILD_SHARED_LIBS=${{ matrix.shared[0] }} ..
          make install -j $(nproc)
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux_${{ matrix.compiler }}
        path: build/install-dir


  windows-tests:
    runs-on: windows-latest
    needs: [windows-build]
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps:
    - uses: actions/checkout@v4
  
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0
      
    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        install-path: Tests/gtest
        build-type: ${{ matrix.configuration }}

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Windows
        path: JSON

    - name: Build tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build\bin
          .\Tests.exe


  linux-tests-gcc:
    runs-on: ubuntu-24.04
    needs: [linux-build]
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
        compiler: [g++]

    steps:
    - uses: actions/checkout@v4
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux_${{ matrix.compiler }}
        path: JSON

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1.1
      with:
        install-path: Tests/gtest
        compiler: ${{ matrix.compiler }}
        
    - name: Build tests
      working-directory: ${{ github.workspace }}/Tests
      env:
        CXX: ${{ matrix.compiler }}
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)
          
    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          LD_LIBRARY_PATH=$(pwd):${LD_LIBRARY_PATH} ./Tests
  

  linux-tests-clang:
    runs-on: ubuntu-24.04
    needs: [linux-build]
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
        compiler: [clang++]

    steps:
    - uses: actions/checkout@v4
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux_${{ matrix.compiler }}
        path: JSON

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1.1
      with:
        install-path: Tests/gtest
        compiler: ${{ matrix.compiler }}
        
    - name: Build tests
      working-directory: ${{ github.workspace }}/Tests
      env:
        CXX: ${{ matrix.compiler }}
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)
          
    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd build/bin
          LD_LIBRARY_PATH=$(pwd):${LD_LIBRARY_PATH} ./Tests


  memory-leak-tests-gcc:
    runs-on: ubuntu-24.04
    needs: [linux-build]
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
        compiler: [g++]

    steps: 
    - uses: actions/checkout@v4
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux_${{ matrix.compiler }}
        path: JSON
    
    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1.1
      with:
        install-path: Tests/gtest
        compiler: ${{ matrix.compiler }}

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      env:
        CXX: ${{ matrix.compiler }}
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)
          
    - name: Memory leak test
      uses: LazyPanda07/check-memory-leaks@v1
      with:
        path: Tests/build/bin
        name: Tests
        pre-execute: export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)
  

  memory-leak-tests-clang:
    runs-on: ubuntu-24.04
    needs: [linux-build]
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
        compiler: [clang++]

    steps: 
    - uses: actions/checkout@v4
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux_${{ matrix.compiler }}
        path: JSON
    
    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1.1
      with:
        install-path: Tests/gtest
        compiler: ${{ matrix.compiler }}

    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      env:
        CXX: ${{ matrix.compiler }}
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)
          
    - name: Memory leak test
      uses: LazyPanda07/check-memory-leaks@v1
      with:
        path: Tests/build/bin
        name: Tests
        pre-execute: export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)


  publish:
    needs: [windows-tests, linux-tests-gcc, linux-tests-clang, memory-leak-tests-gcc, memory-leak-tests-clang]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: LazyPanda07/extract-current-branch@master
    
    - name: Setup release version variable
      shell: pwsh
      run: echo "VERSION=$($($($(Select-String -Path .\src\JSONUtility.cpp -Pattern jsonVersion) -split '( = )')[3].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV

    - name: Download artifacts
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: actions/download-artifact@v4
      
    - name: Setup Windows build list
      run: echo "WINDOWS_BUILD_LIST="$(ls | grep Windows)"" >> ${GITHUB_ENV}
      
    - name: Create Windows zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r windows.zip ${{ env.WINDOWS_BUILD_LIST }}

    - name: Create Linux zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r linux.zip Release_Linux_g++ ReleaseDLL_Linux_g++ Release_Linux_clang++ ReleaseDLL_Linux_clang++

    - name: Publish Windows
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@master
      with:
        tag: v${{ env.VERSION }}
        file: windows.zip

    - name: Publish Linux
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@master
      with:
        tag: v${{ env.VERSION }}
        file: linux.zip
        